######### Basics #########

- How to run java file from cmd line
  - Run javac YourFileName.java   //This will generate a .class file containing the bytecode.
  - java YourFileName  //Use the java command to run the compiled Java program

- Run java program with specific memory
    java -Xms256m -Xmx1g YourFileName  //This will ensure that your Java program starts with 256 MB of heap memory and can use up to 1 GB of heap memory as needed



1) Interface Vs  Abstract Class
a) Multiple Inheritance supported in Interface
b) Interface used for common functionality Across Unrelated Classes   |  Abstract class is used for common functionality Across Related Classes
c) Interface can only have public final variables

2) RunTime Polymorphism vs Compile time polymorphism
-  RunTime Polymorphism is method overriding 
 & Compile time polymorphism is method overloading

3)Can I override constructor/static-method/main-method/abstract-method
a) Constructors cannot be overridden.
b) static method  cannot be overridden.
c)  main   method  cannot be overridden.
d) abstract  method must be be overridden.

4)Can I overload constructor/static-method/main-method/abstract-method
a) Constructors can  be overridden.
b) static method  can be overridden.
c)  main   method  can be overridden.
d) abstract  method cannot   be be overridden.

5)Comparator vs comparable



6) What is difference between
 - Serialization vs De-Serialization
 - Autoboxing vs Unboxing

7) Why we use String[] arg in main method? Why String[] not int[]?

8) What will be results of below
System.out.println(10+10+"The String");
System.out.println("The String"+10+10);

9) What is Pojo Class:
They typically have private fields with public getter and setter methods.


10) keywords
a) this vs super
b) private, default, public, protected
c) volatile
d ) synchronized : The synchronized keyword in Java is used to control access to a block of code or method by multiple threads. 
It ensures that only one thread can execute the synchronized code at a time, preventing race conditions and ensuring thread safety. 

11)  Upcasting vs downCasting. [Refer https://media.geeksforgeeks.org/wp-content/uploads/20200506150009/Upcasting-Vs-Downcasting1.png]
   a) Upcasting
     Example: Parent p = new Child();
   b) Downcasting
     // Trying to Downcasting Implicitly
     // Child c = new Parent(); - > compile time error

     // Downcasting Explicitly
     Child c = (Child)p;

12) what is readresolve()
readResolve() is a method in Java used in the context of serialization.
 It's part of the Serializable interface, and its main purpose is to ensure
 that the object being deserialized is replaced with another object.
 This is particularly useful for maintaining the singleton property or ensuring
 unique instances after deserialization.


############# Strings #############

1) what is String pool?

String s1 = "Java";
String s2 = "Java";
String s3 = new String("Java");
String s4 = new String("Java").intern();
System.out.println((s1 == s2)+", String are equal."); // true
System.out.println((s1 == s3)+", String are not equal."); // false
System.out.println((s1 == s4)+", String are equal."); // true

2) Why is String Immutable

3) what is generics?
    Generics are a powerful feature in Java that allow you to define classes, interfaces,
    and methods with a placeholder for a type that will be specified later.
     This makes your code more flexible and type-safe, enabling you to work with different
     data types without the need for casting and with fewer runtime errors.


############# Memory Management #############
Reference Videos
- https://www.youtube.com/watch?v=4yKxJjYXZ0A
- https://www.youtube.com/watch?v=vz6vSZRuS2M&t=939s

1) Memory Management:
 a) Speed: Which is faster- Stack is faster
 b) Size: which have more memory- Heap is faster
 c) is metaspace part of heap--no

2) In Which Memory is below stored
 a) local variables(primitive) - Stack
   - Example: int a=5;
 b) local variables(non-primitive) - Reference will stored in stack and value will be stored in heap
   - Example: Integer a=5; - Reference 'a' will stored in stack and value '5' will be stored in heap
 c) local variables(non-primitive) - Reference will stored in stack and value will be stored in heap
   - Example: String a="5"; - Reference 'a' will stored in stack and value '5' will be stored in heap
d) instance variables? - Heap
 g) Static variables(Class Variables) - Metaspace
 h) Static methods/class methods - Metaspace


2) What is parts of Heap memory?
The heap memory in Java is divided into several parts, each serving a specific purpose in memory management and garbage collection. Here are the main parts of the heap memory:
    1. Young Generation
    This is where all new objects are allocated. The young generation is further divided into three parts:

        a) Eden Space: This is where new objects are initially allocated.
        b) Survivor Space (S0 and S1): After surviving one or more garbage collection cycles in the Eden space, objects are moved to the survivor spaces. There are typically two survivor spaces, S0 and S1, which are used alternately.

    2. Old Generation (Tenured Generation)
    Objects that have survived multiple garbage collection cycles in the young generation are moved to the old generation. This space is used to store long-lived objects. Garbage collection in the old generation is less frequent but more time-consuming compared to the young generation.

    3. Permanent Generation (Metaspace)
    Prior to Java 8, the permanent generation (PermGen) was used to store metadata about classes and methods. Starting with Java 8, PermGen was replaced by Metaspace, which is not part of the heap but is still an important area for storing class metadata. Metaspace grows dynamically and is managed separately from the heap12.

Example of Heap Memory Structure:
Heap Memory
├── Young Generation
│   ├── Eden Space
│   ├── Survivor Space S0
│   └── Survivor Space S1
├── Old Generation
└── Metaspace (or Permanent Generation in Java 7 and earlier)


3) What is garbage collector?
Garbage collector destroy objects which have The garbage collector automatically identifies and frees up memory that is no longer being used by the program.
This contrasts with manual memory management, where the programmer must explicitly allocate and deallocate memory.

4) Garbage collector Algorithm to remove unused objects from heap?
  a)Mark and sweep
  b)Mark-and-Compact
  c)Copying (or Semi-Space) Collection
  d) Generational Garbage Collection

5) Types of Garbage collector?
1) Serial Garbage Collector: Uses a single thread for garbage collection.
2) Parallel Garbage Collector: Uses multiple threads to perform garbage collection.
3) Concurrent Mark-Sweep (CMS) Garbage Collector: Aims to minimize pause times by performing most of the garbage collection concurrently with the application threads.
4) Garbage-First (G1) Garbage Collector: Divides the heap into regions and prioritizes garbage collection in regions with the most garbage.
5) Z Garbage Collector (ZGC): A low-latency garbage collector that aims to keep pause times below 10ms.
6) Epsilon Garbage Collector: A no-op garbage collector that handles memory allocation but does not reclaim any memory.

############# Multi Threading #############
Reference Video: https://www.youtube.com/watch?v=TpYIcJN9EV8

1) Difference between process and thread
Process is instance of program that is being executed.
Thread is the smallest set of instruction that is be executed by CPU


############# Sorting Algorithm #############

1) Bubble Sort
    Explanation: Repeatedly steps through the array, compares adjacent elements and
    swaps them if they are in the wrong order.

    Example:
        Initial Array: {3, 1, 4, 2}
        After 1st Pass: {1, 3, 4, 2}
        After 2nd Pass: {1, 3, 2, 4}
        After 3rd Pass: {1, 2, 3, 4}

    Time Complexity: O(n²)
    Space Complexity: O(1)
    Usage: Simple to understand and implement, but inefficient for large datasets.

2) Selection Sort
    Explanation: Selects the smallest element from the unsorted part and
    swaps it with the first unsorted element.

    Example:
        Initial Array: {3, 1, 4, 2}
        After 1st Pass: {1, 3, 4, 2}
        After 2nd Pass: {1, 2, 4, 3}
        After 3rd Pass: {1, 2, 3, 4}

    Time Complexity: O(n²)
    Space Complexity: O(1)
    Usage: Good for small datasets, but generally outperformed by other O(n²) algorithms.

3) Merge Sort
    Explanation: Divides the array into halves, sorts them, and merges the sorted halves.

    Example:
        Initial Array: {3, 1, 4, 2}
        Divide: {3, 1} and {4, 2}
        Sort: {1, 3} and {2, 4}
        Merge: {1, 2, 3, 4}

    Time Complexity: O(n log n)
    Space Complexity: O(n)
    Usage: Stable and efficient for large datasets, but uses more memory.

4) Quick Sort
    Explanation: Selects a pivot, partitions the array around the pivot, and
    recursively sorts the partitions.

    Example:
        Initial Array: {3, 1, 4, 2}
        Pivot: 3
        Partition: {1, 2}, {3}, {4}
        Sort: {1, 2} and {4}
        Merge: {1, 2, 3, 4}

    Time Complexity: O(n log n) average, O(n²) worst case
    Space Complexity: O(log n)
    Usage: Fast and efficient for in-memory sorting, but not stable.


############# Reflection #############

1)What is java Reflection?
Java reflection is an API that provides the ability to inspect
and modify the runtime behavior of applications running in the Java Virtual Machine (JVM).


