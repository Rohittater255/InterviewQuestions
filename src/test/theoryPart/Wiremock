https://www.youtube.com/watch?v=VouscOgOmZE&list=PLq3uEqRnr_2FKs8K3_kIG9g93Uy9dVdtR
https://github.com/codefarm0/WireMock
https://www.youtube.com/watch?v=XT9d_cBSCOA
################### Wiremock ###################

1) What is wiremock. Why and when we use it?

2) Modes to run wiremock
    i) Running as Jar (local Mode):
        a) to run in local mode first download jar -->https://wiremock.org/docs/download-and-installation/
        b) in cmd, run command--> java -jar wiremock-standalone-3.9.1.jar
        c) in browser open link--> http://localhost:8080/__admin/mappings
        d) In Postman--> Import new Curl Request--> Run below

            curl --location 'http://localhost:8080/__admin/mappings' \
            --header 'Content-Type: application/json' \
            --data '{
                "request": {
                    "url": "/api/mytest",
                    "method": "GET"
                },
                "response": {
                    "status": 200,
                    "body": "Here it is!\n"
                }
            }'


       e) Go to Browser and verify mapping is created ( Url: http://localhost:8080/__admin/mappings)
       f) Go to Browser and verify Get Request ( Url: http://localhost:8080/api/mytest)
       g) Go to Browser and run invalid Request ( Url: http://localhost:8080/invalid)

    ii) Running as Docker Image (remote mode):



What is the difference between stubbing and mocking in WireMock?
    Stubbing and mocking in WireMock serve distinct purposes:

    Stubbing involves creating predefined responses for specific API requests. It's like setting up a fake service endpoint with fixed responses. This is particularly useful for testing how your application handles various API responses without needing the actual service.

    Mocking goes a step further by verifying that certain requests were made. It not only simulates the API but also checks if the interactions with the API match your expectations, ensuring your application makes the correct API calls.

    In short, stubbing is about providing responses, while mocking is about verifying interactions. Each can be useful depending on what aspect of your application you need to test or simulate.