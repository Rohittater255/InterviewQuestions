################### Bitbucket###################

1) Diff between workspace, project and repository
2) Move/Transfer Repo from one bitbucket account
  In Bitbucket, Go To Repository Settings--> Manage repository-->Transfer Repository. Enter Workspace name and click on transfer
  Refer https://www.youtube.com/watch?v=SS-jG0Ke3Dg
3) Handle merge conflict
  - Take code from your branch--> git clone yorrepo...
  - Rebase code from master branch--> git rebase origin/main
  - Resolve the merge conflicts in IDE

4) Handle merge conflict for large number of file


5) Types of Branch Strategy in Bitbucket
   - Master(main Branch):
   - Develop(main Branch):
   - Release(main Branch):

   https://www.youtube.com/watch?v=KKByv7JyzOw

6) Types of Merge Strategy in Bitbucket
    In Bitbucket, there are several types of merge strategies you can use when integrating changes from one branch into another. Here are the main ones:
        Merge Commit: This strategy creates a new merge commit in the target branch, preserving the history of all commits from the source branch. It’s useful for maintaining a detailed history of changes1.
        Squash Merge: This combines all the commits from the source branch into a single commit before merging into the target branch. It helps keep the commit history clean and easy to follow1.
        Fast-Forward Merge: This strategy moves the target branch tip forward to the source branch tip if there are no new commits in the target branch since the source branch was created. It results in a linear history1.
        Rebase and Merge: This replays the commits from the source branch onto the target branch, creating a linear history without merge commits. It’s useful for keeping a clean project history2.
        Rebase + Fast-Forward: This combines rebase and fast-forward strategies, ensuring a linear history without merge commits, provided there are no new commits in the target branch2.




################### GIT ###################


- What is Diff between below
   a) merge and rebase
   b) merge commit and a squash merge
   c) fetch and pull

- Basic Git Commands
  1) Commiting Code
    Add File : git add rohit.java
    Commit File : git commit -m "Enter your commit message"
    Create Branch : git branch -b myLocalBranchName

  2) Retrieve code from repo
    Get Full Project(from master branch) : git branch -b myLocalBranchName
    Get Full Project(from feature branch) : git branch -b myLocalBranchName
    Get Code for specific file(from master Branch) : git push -f -b myLocalBranchName

  3) Rebase, merge
    Get Full Project(from master branch) : git branch -b myLocalBranchName


################### Maven ###################
Refer: https://www.youtube.com/watch?v=h9twuFNNzSk

- What is Maven? Why we use it?
- What is pom.xml file ? Why we use it?
- When we perform maven clean+install, where is maven dependency downloaded in your local?
  Answer--> .m2/repository
- Can we configure path where maven repository is loaded?
  Answer--> Yes
  Go To  File -> Settings-->Build, Execution, Deployment -> Build Tools -> Maven. Update Path in 'Local Repository'
- Name all lifecycle in maven
- What are use of below maven commands
    1) mvn clean:
        This command is used to remove all files generated by the previous build.
        It essentially cleans the project's directory by deleting the target directory and its contents.
        This ensures that you're starting with a clean slate for your next build.
    2) mvn install:
        This command compiles the source code, runs tests, packages the code into a JAR or WAR,
        and installs the package into your local repository.
        It makes the package available for use as a dependency in other projects locally.
    3) mvn clean + install:
        This command is a combination of the two above.
        It first cleans the project directory by removing previous build artifacts, and then it compiles,
        tests, packages, and installs the project into the local repository.
        This is commonly used to ensure you're building from scratch and the artifacts are up-to-date.